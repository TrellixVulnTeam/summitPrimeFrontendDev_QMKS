{"ast":null,"code":"import { changePage, loading, toggleModal, updateOrcamentos } from \"./Actions\";\nimport callBackend from \"./CallBackend\";\n\nvar crypto = require(\"crypto\");\n\nexport const criarOrcamento = titulo => {\n  return async (dispatch, getState) => {\n    dispatch(loading(true));\n    let {\n      socket\n    } = getState().pages;\n    let token = localStorage.getItem(\"token\");\n    await callBackend(socket, \"newOrcamento\", token, {\n      titulo\n    }); // await dispatch(updateOrcamentos({ atual: id }));\n\n    await dispatch(toggleModal(\"criarOrcamento\", false));\n    await dispatch(loading(false)); // await dispatch(changePage(\"orcamentoAtual\"));\n    // await dispatch(toggleModal(\"informacoes\", true));\n\n    Promise.resolve();\n  };\n};","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/CriarOrcamento.js"],"names":["changePage","loading","toggleModal","updateOrcamentos","callBackend","crypto","require","criarOrcamento","titulo","dispatch","getState","socket","pages","token","localStorage","getItem","Promise","resolve"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,WAA9B,EAA2CC,gBAA3C,QAAmE,WAAnE;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;AACxC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAACR,OAAO,CAAC,IAAD,CAAR,CAAR;AACA,QAAI;AAAEU,MAAAA;AAAF,QAAaD,QAAQ,GAAGE,KAA5B;AACA,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,UAAMX,WAAW,CAACO,MAAD,EAAS,cAAT,EAAyBE,KAAzB,EAAgC;AAAEL,MAAAA;AAAF,KAAhC,CAAjB,CAJmC,CAKnC;;AACA,UAAMC,QAAQ,CAACP,WAAW,CAAC,gBAAD,EAAmB,KAAnB,CAAZ,CAAd;AACA,UAAMO,QAAQ,CAACR,OAAO,CAAC,KAAD,CAAR,CAAd,CAPmC,CASnC;AACA;;AAEAe,IAAAA,OAAO,CAACC,OAAR;AACD,GAbD;AAcD,CAfM","sourcesContent":["import { changePage, loading, toggleModal, updateOrcamentos } from \"./Actions\";\r\nimport callBackend from \"./CallBackend\";\r\nvar crypto = require(\"crypto\");\r\n\r\nexport const criarOrcamento = (titulo) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(loading(true));\r\n    let { socket } = getState().pages;\r\n    let token = localStorage.getItem(\"token\");\r\n    await callBackend(socket, \"newOrcamento\", token, { titulo });\r\n    // await dispatch(updateOrcamentos({ atual: id }));\r\n    await dispatch(toggleModal(\"criarOrcamento\", false));\r\n    await dispatch(loading(false));\r\n\r\n    // await dispatch(changePage(\"orcamentoAtual\"));\r\n    // await dispatch(toggleModal(\"informacoes\", true));\r\n\r\n    Promise.resolve();\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}