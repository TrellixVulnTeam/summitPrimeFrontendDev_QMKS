{"ast":null,"code":"import { setFiltros, setOrdemAtiva, setProdutosAtivos } from \"../Actions\";\nexport const SetOrdem = type => {\n  return async (dispatch, getState) => {\n    let produtos = getState().loja.produtosAtivos;\n    let produtosAtivos = [];\n\n    switch (type) {\n      case \"nomeAZ\":\n        produtosAtivos = produtos.sort((x, y) => {\n          let a = x.nomeVnda;\n          let b = y.nomeVnda;\n          return a === b ? 0 : a > b ? 1 : -1;\n        });\n        break;\n\n      case \"nomeZA\":\n        produtosAtivos = produtos.sort((x, y) => {\n          let a = x.nomeVnda;\n          let b = y.nomeVnda;\n          return a === b ? 0 : a < b ? 1 : -1;\n        });\n        break;\n\n      case \"precoCrescente\":\n        produtosAtivos = produtos.sort((x, y) => {\n          let a = x.valor;\n          let b = y.valor;\n          return a === b ? 0 : a > b ? 1 : -1;\n        });\n        break;\n\n      case \"precoDecresente\":\n        produtosAtivos = produtos.sort((x, y) => {\n          let a = x.valor;\n          let b = y.valor;\n          return a === b ? 0 : a < b ? 1 : -1;\n        });\n        break;\n\n      default:\n        type = \"nomeAZ\";\n        produtosAtivos = produtos.sort((x, y) => {\n          let a = x.nomeVnda;\n          let b = y.nomeVnda;\n          return a === b ? 0 : a > b ? 1 : -1;\n        });\n        let produtosMega = produtosAtivos.filter(produto => {\n          return produto.tags.linha === \"Tris Mega\";\n        });\n        let produtosNaoMega = produtosAtivos.filter(produto => {\n          return produto.tags.linha !== \"Tris Mega\";\n        });\n        produtosAtivos = [...produtosMega, ...produtosNaoMega];\n        break;\n    }\n\n    dispatch(setOrdemAtiva(type));\n    console.log(produtosAtivos);\n    dispatch(setProdutosAtivos(produtosAtivos));\n  };\n};\n_c = SetOrdem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetOrdem\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/Loja/SetOrdem.js"],"names":["setFiltros","setOrdemAtiva","setProdutosAtivos","SetOrdem","type","dispatch","getState","produtos","loja","produtosAtivos","sort","x","y","a","nomeVnda","b","valor","produtosMega","filter","produto","tags","linha","produtosNaoMega","console","log"],"mappings":"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","sourcesContent":["import { setFiltros, setOrdemAtiva, setProdutosAtivos } from \"../Actions\";\r\n\r\nexport const SetOrdem = (type) => {\r\n  return async (dispatch, getState) => {\r\n    let produtos = getState().loja.produtosAtivos;\r\n    let produtosAtivos = [];\r\n    switch (type) {\r\n      case \"nomeAZ\":\r\n        produtosAtivos = produtos.sort((x, y) => {\r\n          let a = x.nomeVnda;\r\n          let b = y.nomeVnda;\r\n\r\n          return a === b ? 0 : a > b ? 1 : -1;\r\n        });\r\n        break;\r\n      case \"nomeZA\":\r\n        produtosAtivos = produtos.sort((x, y) => {\r\n          let a = x.nomeVnda;\r\n          let b = y.nomeVnda;\r\n\r\n          return a === b ? 0 : a < b ? 1 : -1;\r\n        });\r\n        break;\r\n      case \"precoCrescente\":\r\n        produtosAtivos = produtos.sort((x, y) => {\r\n          let a = x.valor;\r\n          let b = y.valor;\r\n\r\n          return a === b ? 0 : a > b ? 1 : -1;\r\n        });\r\n        break;\r\n      case \"precoDecresente\":\r\n        produtosAtivos = produtos.sort((x, y) => {\r\n          let a = x.valor;\r\n          let b = y.valor;\r\n\r\n          return a === b ? 0 : a < b ? 1 : -1;\r\n        });\r\n\r\n        break;\r\n      default:\r\n        type = \"nomeAZ\";\r\n        produtosAtivos = produtos.sort((x, y) => {\r\n          let a = x.nomeVnda;\r\n          let b = y.nomeVnda;\r\n\r\n          return a === b ? 0 : a > b ? 1 : -1;\r\n        });\r\n        let produtosMega = produtosAtivos.filter((produto) => {\r\n          return produto.tags.linha === \"Tris Mega\";\r\n        });\r\n        let produtosNaoMega = produtosAtivos.filter((produto) => {\r\n          return produto.tags.linha !== \"Tris Mega\";\r\n        });\r\n\r\n        produtosAtivos = [...produtosMega, ...produtosNaoMega];\r\n        break;\r\n    }\r\n    dispatch(setOrdemAtiva(type));\r\n    console.log(produtosAtivos);\r\n    dispatch(setProdutosAtivos(produtosAtivos));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}