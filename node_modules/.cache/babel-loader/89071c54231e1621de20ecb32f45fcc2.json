{"ast":null,"code":"import { changePage, loading, savingOrcamento, toggleModal, updateOrcamentos } from \"./Actions\";\nimport callBackend from \"./CallBackend\";\nimport { ChangePage } from \"./ChangePage\";\n\nvar crypto = require(\"crypto\");\n\nexport const saveOrcamento = (orcamento = false) => {\n  return (dispatch, getState) => {\n    try {\n      let {\n        socket\n      } = getState().pages;\n      let token = localStorage.getItem(\"token\");\n      let id;\n\n      if (orcamento) {\n        dispatch(savingOrcamento(true));\n        let {\n          subTotal,\n          subTotalDisponivel,\n          total,\n          totalDisponivel,\n          ...rest\n        } = orcamento;\n        orcamento = { ...rest,\n          ultimaModificacao: new Date()\n        };\n      } else {\n        dispatch(loading(true));\n        id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\n        orcamento = {\n          id,\n          titulo: infos,\n          pagamentoAntecipado: false,\n          itens: [{\n            sku: \"\",\n            nome: \"\",\n            caixaMaster: 0,\n            valor: 0,\n            quantidade: 0,\n            multiplo: 0,\n            estoque: 0\n          }],\n          criadoEm: new Date(),\n          ultimaModificacao: new Date()\n        };\n      }\n\n      callBackend(socket, \"saveOrcamento\", token, { ...orcamento\n      }).then(async r => {\n        await dispatch(updateOrcamentos({\n          salvos: r.orcamentos\n        }));\n        dispatch(savingOrcamento(false));\n        dispatch(loading(false));\n\n        if (typeof infos === \"string\") {\n          console.log(id);\n          await dispatch(updateOrcamentos({\n            atual: id\n          }));\n          await dispatch(ChangePage(\"orcamentoAtual\"));\n          await dispatch(toggleModal(\"criarOrcamento\", false));\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/SaveOrcamento.js"],"names":["changePage","loading","savingOrcamento","toggleModal","updateOrcamentos","callBackend","ChangePage","crypto","require","saveOrcamento","orcamento","dispatch","getState","socket","pages","token","localStorage","getItem","id","subTotal","subTotalDisponivel","total","totalDisponivel","rest","ultimaModificacao","Date","randomBytes","toString","toUpperCase","titulo","infos","pagamentoAntecipado","itens","sku","nome","caixaMaster","valor","quantidade","multiplo","estoque","criadoEm","then","r","salvos","orcamentos","console","log","atual","e"],"mappings":"AAAA,SACEA,UADF,EAEEC,OAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,gBALF,QAMO,WANP;AAOA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,SAAS,GAAG,KAAb,KAAuB;AAClD,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,QAAI;AACF,UAAI;AAAEC,QAAAA;AAAF,UAAaD,QAAQ,GAAGE,KAA5B;AACA,UAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,UAAIC,EAAJ;;AACA,UAAIR,SAAJ,EAAe;AACbC,QAAAA,QAAQ,CAACT,eAAe,CAAC,IAAD,CAAhB,CAAR;AACA,YAAI;AAAEiB,UAAAA,QAAF;AAAYC,UAAAA,kBAAZ;AAAgCC,UAAAA,KAAhC;AAAuCC,UAAAA,eAAvC;AAAwD,aAAGC;AAA3D,YACFb,SADF;AAEAA,QAAAA,SAAS,GAAG,EAAE,GAAGa,IAAL;AAAWC,UAAAA,iBAAiB,EAAE,IAAIC,IAAJ;AAA9B,SAAZ;AACD,OALD,MAKO;AACLd,QAAAA,QAAQ,CAACV,OAAO,CAAC,IAAD,CAAR,CAAR;AACAiB,QAAAA,EAAE,GAAGX,MAAM,CAACmB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,EAAuCC,WAAvC,EAAL;AACAlB,QAAAA,SAAS,GAAG;AACVQ,UAAAA,EADU;AAEVW,UAAAA,MAAM,EAAEC,KAFE;AAGVC,UAAAA,mBAAmB,EAAE,KAHX;AAIVC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,GAAG,EAAE,EADP;AAEEC,YAAAA,IAAI,EAAE,EAFR;AAGEC,YAAAA,WAAW,EAAE,CAHf;AAIEC,YAAAA,KAAK,EAAE,CAJT;AAKEC,YAAAA,UAAU,EAAE,CALd;AAMEC,YAAAA,QAAQ,EAAE,CANZ;AAOEC,YAAAA,OAAO,EAAE;AAPX,WADK,CAJG;AAeVC,UAAAA,QAAQ,EAAE,IAAIf,IAAJ,EAfA;AAgBVD,UAAAA,iBAAiB,EAAE,IAAIC,IAAJ;AAhBT,SAAZ;AAkBD;;AACDpB,MAAAA,WAAW,CAACQ,MAAD,EAAS,eAAT,EAA0BE,KAA1B,EAAiC,EAAE,GAAGL;AAAL,OAAjC,CAAX,CAA8D+B,IAA9D,CACE,MAAOC,CAAP,IAAa;AACX,cAAM/B,QAAQ,CAACP,gBAAgB,CAAC;AAAEuC,UAAAA,MAAM,EAAED,CAAC,CAACE;AAAZ,SAAD,CAAjB,CAAd;AACAjC,QAAAA,QAAQ,CAACT,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAS,QAAAA,QAAQ,CAACV,OAAO,CAAC,KAAD,CAAR,CAAR;;AACA,YAAI,OAAO6B,KAAP,KAAiB,QAArB,EAA+B;AAC7Be,UAAAA,OAAO,CAACC,GAAR,CAAY5B,EAAZ;AACA,gBAAMP,QAAQ,CAACP,gBAAgB,CAAC;AAAE2C,YAAAA,KAAK,EAAE7B;AAAT,WAAD,CAAjB,CAAd;AACA,gBAAMP,QAAQ,CAACL,UAAU,CAAC,gBAAD,CAAX,CAAd;AACA,gBAAMK,QAAQ,CAACR,WAAW,CAAC,gBAAD,EAAmB,KAAnB,CAAZ,CAAd;AACD;AACF,OAXH;AAaD,KA5CD,CA4CE,OAAO6C,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF,GAhDD;AAiDD,CAlDM","sourcesContent":["import {\r\n  changePage,\r\n  loading,\r\n  savingOrcamento,\r\n  toggleModal,\r\n  updateOrcamentos,\r\n} from \"./Actions\";\r\nimport callBackend from \"./CallBackend\";\r\nimport { ChangePage } from \"./ChangePage\";\r\nvar crypto = require(\"crypto\");\r\n\r\nexport const saveOrcamento = (orcamento = false) => {\r\n  return (dispatch, getState) => {\r\n    try {\r\n      let { socket } = getState().pages;\r\n      let token = localStorage.getItem(\"token\");\r\n      let id;\r\n      if (orcamento) {\r\n        dispatch(savingOrcamento(true));\r\n        let { subTotal, subTotalDisponivel, total, totalDisponivel, ...rest } =\r\n          orcamento;\r\n        orcamento = { ...rest, ultimaModificacao: new Date() };\r\n      } else {\r\n        dispatch(loading(true));\r\n        id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\r\n        orcamento = {\r\n          id,\r\n          titulo: infos,\r\n          pagamentoAntecipado: false,\r\n          itens: [\r\n            {\r\n              sku: \"\",\r\n              nome: \"\",\r\n              caixaMaster: 0,\r\n              valor: 0,\r\n              quantidade: 0,\r\n              multiplo: 0,\r\n              estoque: 0,\r\n            },\r\n          ],\r\n          criadoEm: new Date(),\r\n          ultimaModificacao: new Date(),\r\n        };\r\n      }\r\n      callBackend(socket, \"saveOrcamento\", token, { ...orcamento }).then(\r\n        async (r) => {\r\n          await dispatch(updateOrcamentos({ salvos: r.orcamentos }));\r\n          dispatch(savingOrcamento(false));\r\n          dispatch(loading(false));\r\n          if (typeof infos === \"string\") {\r\n            console.log(id);\r\n            await dispatch(updateOrcamentos({ atual: id }));\r\n            await dispatch(ChangePage(\"orcamentoAtual\"));\r\n            await dispatch(toggleModal(\"criarOrcamento\", false));\r\n          }\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}