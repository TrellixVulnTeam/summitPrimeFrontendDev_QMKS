{"ast":null,"code":"import { changePage, updateOrcamentos } from \"./Actions\";\nimport callBackend from \"./CallBackend\";\nexport const DeleteOrcamento = () => {\n  return async (dispatch, getState) => {\n    let token = localStorage.getItem(\"token\");\n    let id = getState().orcamentos.atual;\n    let {\n      socket\n    } = getState().pages;\n    await callBackend(socket, \"deleteOrcamento\", token, {\n      id\n    }).then(async r => {\n      await dispatch(changePage(\"salvos\"));\n      await dispatch(updateOrcamentos({\n        atual: false\n      }));\n      await dispatch(updateOrcamentos({\n        salvos: r.orcamentos\n      }));\n    });\n  };\n};\n_c = DeleteOrcamento;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteOrcamento\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/DeleteOrcamento.js"],"names":["changePage","updateOrcamentos","callBackend","DeleteOrcamento","dispatch","getState","token","localStorage","getItem","id","orcamentos","atual","socket","pages","then","r","salvos"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,QAA6C,WAA7C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,QAAIC,EAAE,GAAGJ,QAAQ,GAAGK,UAAX,CAAsBC,KAA/B;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAaP,QAAQ,GAAGQ,KAA5B;AACA,UAAMX,WAAW,CAACU,MAAD,EAAS,iBAAT,EAA4BN,KAA5B,EAAmC;AAAEG,MAAAA;AAAF,KAAnC,CAAX,CAAsDK,IAAtD,CACJ,MAAOC,CAAP,IAAa;AACX,YAAMX,QAAQ,CAACJ,UAAU,CAAC,QAAD,CAAX,CAAd;AACA,YAAMI,QAAQ,CAACH,gBAAgB,CAAC;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAjB,CAAd;AACA,YAAMP,QAAQ,CAACH,gBAAgB,CAAC;AAAEe,QAAAA,MAAM,EAAED,CAAC,CAACL;AAAZ,OAAD,CAAjB,CAAd;AACD,KALG,CAAN;AAOD,GAXD;AAYD,CAbM;KAAMP,e","sourcesContent":["import { changePage, updateOrcamentos } from \"./Actions\";\r\nimport callBackend from \"./CallBackend\";\r\n\r\nexport const DeleteOrcamento = () => {\r\n  return async (dispatch, getState) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    let id = getState().orcamentos.atual;\r\n    let { socket } = getState().pages;\r\n    await callBackend(socket, \"deleteOrcamento\", token, { id }).then(\r\n      async (r) => {\r\n        await dispatch(changePage(\"salvos\"));\r\n        await dispatch(updateOrcamentos({ atual: false }));\r\n        await dispatch(updateOrcamentos({ salvos: r.orcamentos }));\r\n      }\r\n    );\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}