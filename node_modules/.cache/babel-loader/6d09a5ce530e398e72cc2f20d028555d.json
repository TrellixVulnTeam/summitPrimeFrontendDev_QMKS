{"ast":null,"code":"import { trocarItem } from \"../Actions\";\nimport callBackend from \"../CallBackend\";\nimport { calcularValores } from \"./CalcularValores\";\nexport const ChangeAllProdutos = indexOrcamento => {\n  let token = localStorage.getItem(\"token\");\n  return async (dispatch, getState) => {\n    let produtos = getState().orcamentos.salvos[indexOrcamento].itens;\n\n    for (let i = 0; i < produtos.length; i++) {\n      const sku = produtos[i].sku;\n      let informacoes = getState().informacoes;\n\n      if (sku && sku.toString().length > 5 && sku / 6000 > 1) {\n        let data = {\n          sku,\n          tabela: informacoes.tabela,\n          UF: informacoes.UF\n        };\n        await callBackend(\"/getProduto\", token, data).then(async r => {\n          await dispatch(trocarItem(r, i, indexOrcamento));\n          await dispatch(calcularValores());\n        }).catch(async e => {\n          await dispatch(trocarItem({\n            sku: \"\",\n            nome: \"\",\n            valor: 0,\n            valorReal: 0,\n            quantidade: 0,\n            preco: 0,\n            multiplo: 0,\n            caixaMaster: 0,\n            estoque: \"\"\n          }, i, indexOrcamento));\n        });\n      } else {\n        await dispatch(trocarItem({\n          sku: \"\",\n          nome: \"\",\n          valor: 0,\n          valorReal: 0,\n          quantidade: 0,\n          preco: 0,\n          multiplo: 0,\n          caixaMaster: 0,\n          estoque: \"\"\n        }, i, indexOrcamento));\n      }\n    }\n\n    await dispatch(calcularValores());\n  };\n};\n_c = ChangeAllProdutos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeAllProdutos\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/TabelaActions/ChangeAllProdutos.js"],"names":["trocarItem","callBackend","calcularValores","ChangeAllProdutos","indexOrcamento","token","localStorage","getItem","dispatch","getState","produtos","orcamentos","salvos","itens","i","length","sku","informacoes","toString","data","tabela","UF","then","r","catch","e","nome","valor","valorReal","quantidade","preco","multiplo","caixaMaster","estoque"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,cAAD,IAAoB;AACnD,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,QAAQ,GAAGD,QAAQ,GAAGE,UAAX,CAAsBC,MAAtB,CAA6BR,cAA7B,EAA6CS,KAA5D;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAME,GAAG,GAAGN,QAAQ,CAACI,CAAD,CAAR,CAAYE,GAAxB;AAEA,UAAIC,WAAW,GAAGR,QAAQ,GAAGQ,WAA7B;;AACA,UAAID,GAAG,IAAIA,GAAG,CAACE,QAAJ,GAAeH,MAAf,GAAwB,CAA/B,IAAoCC,GAAG,GAAG,IAAN,GAAa,CAArD,EAAwD;AACtD,YAAIG,IAAI,GAAG;AACTH,UAAAA,GADS;AAETI,UAAAA,MAAM,EAAEH,WAAW,CAACG,MAFX;AAGTC,UAAAA,EAAE,EAAEJ,WAAW,CAACI;AAHP,SAAX;AAKA,cAAMpB,WAAW,CAAC,aAAD,EAAgBI,KAAhB,EAAuBc,IAAvB,CAAX,CACHG,IADG,CACE,MAAOC,CAAP,IAAa;AACjB,gBAAMf,QAAQ,CAACR,UAAU,CAACuB,CAAD,EAAIT,CAAJ,EAAOV,cAAP,CAAX,CAAd;AACA,gBAAMI,QAAQ,CAACN,eAAe,EAAhB,CAAd;AACD,SAJG,EAKHsB,KALG,CAKG,MAAOC,CAAP,IAAa;AAClB,gBAAMjB,QAAQ,CACZR,UAAU,CACR;AACEgB,YAAAA,GAAG,EAAE,EADP;AAEEU,YAAAA,IAAI,EAAE,EAFR;AAGEC,YAAAA,KAAK,EAAE,CAHT;AAIEC,YAAAA,SAAS,EAAE,CAJb;AAKEC,YAAAA,UAAU,EAAE,CALd;AAMEC,YAAAA,KAAK,EAAE,CANT;AAOEC,YAAAA,QAAQ,EAAE,CAPZ;AAQEC,YAAAA,WAAW,EAAE,CARf;AASEC,YAAAA,OAAO,EAAE;AATX,WADQ,EAYRnB,CAZQ,EAaRV,cAbQ,CADE,CAAd;AAiBD,SAvBG,CAAN;AAwBD,OA9BD,MA8BO;AACL,cAAMI,QAAQ,CACZR,UAAU,CACR;AACEgB,UAAAA,GAAG,EAAE,EADP;AAEEU,UAAAA,IAAI,EAAE,EAFR;AAGEC,UAAAA,KAAK,EAAE,CAHT;AAIEC,UAAAA,SAAS,EAAE,CAJb;AAKEC,UAAAA,UAAU,EAAE,CALd;AAMEC,UAAAA,KAAK,EAAE,CANT;AAOEC,UAAAA,QAAQ,EAAE,CAPZ;AAQEC,UAAAA,WAAW,EAAE,CARf;AASEC,UAAAA,OAAO,EAAE;AATX,SADQ,EAYRnB,CAZQ,EAaRV,cAbQ,CADE,CAAd;AAiBD;AACF;;AACD,UAAMI,QAAQ,CAACN,eAAe,EAAhB,CAAd;AACD,GAzDD;AA0DD,CA5DM;KAAMC,iB","sourcesContent":["import { trocarItem } from \"../Actions\";\r\nimport callBackend from \"../CallBackend\";\r\nimport { calcularValores } from \"./CalcularValores\";\r\n\r\nexport const ChangeAllProdutos = (indexOrcamento) => {\r\n  let token = localStorage.getItem(\"token\");\r\n  return async (dispatch, getState) => {\r\n    let produtos = getState().orcamentos.salvos[indexOrcamento].itens;\r\n    for (let i = 0; i < produtos.length; i++) {\r\n      const sku = produtos[i].sku;\r\n\r\n      let informacoes = getState().informacoes;\r\n      if (sku && sku.toString().length > 5 && sku / 6000 > 1) {\r\n        let data = {\r\n          sku,\r\n          tabela: informacoes.tabela,\r\n          UF: informacoes.UF,\r\n        };\r\n        await callBackend(\"/getProduto\", token, data)\r\n          .then(async (r) => {\r\n            await dispatch(trocarItem(r, i, indexOrcamento));\r\n            await dispatch(calcularValores());\r\n          })\r\n          .catch(async (e) => {\r\n            await dispatch(\r\n              trocarItem(\r\n                {\r\n                  sku: \"\",\r\n                  nome: \"\",\r\n                  valor: 0,\r\n                  valorReal: 0,\r\n                  quantidade: 0,\r\n                  preco: 0,\r\n                  multiplo: 0,\r\n                  caixaMaster: 0,\r\n                  estoque: \"\",\r\n                },\r\n                i,\r\n                indexOrcamento\r\n              )\r\n            );\r\n          });\r\n      } else {\r\n        await dispatch(\r\n          trocarItem(\r\n            {\r\n              sku: \"\",\r\n              nome: \"\",\r\n              valor: 0,\r\n              valorReal: 0,\r\n              quantidade: 0,\r\n              preco: 0,\r\n              multiplo: 0,\r\n              caixaMaster: 0,\r\n              estoque: \"\",\r\n            },\r\n            i,\r\n            indexOrcamento\r\n          )\r\n        );\r\n      }\r\n    }\r\n    await dispatch(calcularValores());\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}