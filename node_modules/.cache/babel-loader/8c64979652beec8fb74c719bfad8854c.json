{"ast":null,"code":"import { setFiltros } from \"../Actions\";\nexport const ToggleFiltros = (mlce, categorias, isChecked) => {\n  return async (dispatch, getState) => {\n    let produtos = getState().databank.produtos;\n    let filtros = getState().loja.filtros;\n    filtros[mlce.toLowerCase()][categorias].checked = isChecked;\n    let allChecked = [];\n    let mlceKeys = Object.keys(filtros);\n\n    for (let i = 0; i < mlceKeys.length; i++) {\n      const mlceKey = filtros[mlceKeys[i]];\n      let categoriasKeys = Object.keys(mlceKey);\n\n      for (let j = 0; j < categoriasKeys.length; j++) {\n        const categoriasKey = mlceKey[categoriasKeys[j]];\n\n        if (categoriasKey.checked) {\n          let toPush = [mlceKeys[i], categoriasKeys[j]];\n          allChecked.push(toPush);\n        }\n      }\n    }\n\n    let produtosAtivos = [];\n\n    for (let i = 0; i < produtos.length; i++) {\n      const produto = produtos[i];\n      let flag = 1;\n\n      for (let j = 0; j < allChecked.length; j++) {\n        const checked = allChecked[j];\n\n        if (produto.tags[checked[0]] != checked[1]) {\n          flag = 0;\n        }\n      }\n\n      if (flag === 1) {\n        produtosAtivos.push(produto);\n      }\n    }\n\n    let tags = {};\n\n    for (let a = 0; a < mlceKeys.length; a++) {\n      const mlceKey = mlceKeys[a];\n      const mcle = filtros[mlceKey];\n      tags[mlceKey] = {};\n      let categoriasKeys = Object.keys(mcle);\n\n      for (let b = 0; b < categoriasKeys.length; b++) {\n        const categoriasKey = categoriasKeys[b];\n        tags[mlceKey][categoriasKey] = {\n          checked: false,\n          ativo: false,\n          quantidade: 0\n        };\n\n        if (filtros[mlceKey][categoriasKey].checked === true) {\n          tags[mlceKey][categoriasKey].checked = true;\n        }\n\n        for (let i = 0; i < produtosAtivos.length; i++) {\n          const produtoAtivo = produtosAtivos[i];\n\n          if (produtoAtivo.tags[mlceKey] == categoriasKey) {\n            tags[mlceKey][categoriasKey] = { ...tags[mlceKey][categoriasKey],\n              ativo: true,\n              quantidade: tags[mlceKey][categoriasKey].quantidade + 1\n            };\n          }\n        }\n      }\n    } // for (let i = 0; i < produtosAtivos.length; i++) {\n    //   const produtoAtivo = produtosAtivos[i];\n    //   let tagKeys = Object.keys(produtoAtivo.tags);\n    //   for (let j = 0; j < tagKeys.length; j++) {\n    //     const tagKey = tagKeys[j];\n    //     let valor = produtoAtivo.tags[tagKey];\n    //     if (tags[tagKey] && tags[tagKey][valor]) {\n    //       let quantidade = tags[tagKey][valor].quantidade + 1;\n    //       tags[tagKey][valor].quantidade = quantidade;\n    //     } else {\n    //       tags[tagKey] = {\n    //         ...tags[tagKey],\n    //         [valor]: { checked: false, ativo: true, quantidade: 1 },\n    //       };\n    //     }\n    //   }\n    // }\n\n\n    console.log(produtosAtivos);\n    dispatch(setFiltros(tags));\n  };\n};\n_c = ToggleFiltros;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleFiltros\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/Loja/ToggleFiltros.js"],"names":["setFiltros","ToggleFiltros","mlce","categorias","isChecked","dispatch","getState","produtos","databank","filtros","loja","toLowerCase","checked","allChecked","mlceKeys","Object","keys","i","length","mlceKey","categoriasKeys","j","categoriasKey","toPush","push","produtosAtivos","produto","flag","tags","a","mcle","b","ativo","quantidade","produtoAtivo","console","log"],"mappings":"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","sourcesContent":["import { setFiltros } from \"../Actions\";\r\n\r\nexport const ToggleFiltros = (mlce, categorias, isChecked) => {\r\n  return async (dispatch, getState) => {\r\n    let produtos = getState().databank.produtos;\r\n    let filtros = getState().loja.filtros;\r\n\r\n    filtros[mlce.toLowerCase()][categorias].checked = isChecked;\r\n\r\n    let allChecked = [];\r\n\r\n    let mlceKeys = Object.keys(filtros);\r\n    for (let i = 0; i < mlceKeys.length; i++) {\r\n      const mlceKey = filtros[mlceKeys[i]];\r\n      let categoriasKeys = Object.keys(mlceKey);\r\n      for (let j = 0; j < categoriasKeys.length; j++) {\r\n        const categoriasKey = mlceKey[categoriasKeys[j]];\r\n\r\n        if (categoriasKey.checked) {\r\n          let toPush = [mlceKeys[i], categoriasKeys[j]];\r\n          allChecked.push(toPush);\r\n        }\r\n      }\r\n    }\r\n\r\n    let produtosAtivos = [];\r\n    for (let i = 0; i < produtos.length; i++) {\r\n      const produto = produtos[i];\r\n      let flag = 1;\r\n      for (let j = 0; j < allChecked.length; j++) {\r\n        const checked = allChecked[j];\r\n        if (produto.tags[checked[0]] != checked[1]) {\r\n          flag = 0;\r\n        }\r\n      }\r\n      if (flag === 1) {\r\n        produtosAtivos.push(produto);\r\n      }\r\n    }\r\n\r\n    let tags = {};\r\n    for (let a = 0; a < mlceKeys.length; a++) {\r\n      const mlceKey = mlceKeys[a];\r\n      const mcle = filtros[mlceKey];\r\n      tags[mlceKey] = {};\r\n      let categoriasKeys = Object.keys(mcle);\r\n      for (let b = 0; b < categoriasKeys.length; b++) {\r\n        const categoriasKey = categoriasKeys[b];\r\n        tags[mlceKey][categoriasKey] = {\r\n          checked: false,\r\n          ativo: false,\r\n          quantidade: 0,\r\n        };\r\n        if (filtros[mlceKey][categoriasKey].checked === true) {\r\n          tags[mlceKey][categoriasKey].checked = true;\r\n        }\r\n        for (let i = 0; i < produtosAtivos.length; i++) {\r\n          const produtoAtivo = produtosAtivos[i];\r\n          if (produtoAtivo.tags[mlceKey] == categoriasKey) {\r\n            tags[mlceKey][categoriasKey] = {\r\n              ...tags[mlceKey][categoriasKey],\r\n              ativo: true,\r\n              quantidade: tags[mlceKey][categoriasKey].quantidade + 1,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // for (let i = 0; i < produtosAtivos.length; i++) {\r\n    //   const produtoAtivo = produtosAtivos[i];\r\n    //   let tagKeys = Object.keys(produtoAtivo.tags);\r\n    //   for (let j = 0; j < tagKeys.length; j++) {\r\n    //     const tagKey = tagKeys[j];\r\n    //     let valor = produtoAtivo.tags[tagKey];\r\n\r\n    //     if (tags[tagKey] && tags[tagKey][valor]) {\r\n    //       let quantidade = tags[tagKey][valor].quantidade + 1;\r\n    //       tags[tagKey][valor].quantidade = quantidade;\r\n    //     } else {\r\n    //       tags[tagKey] = {\r\n    //         ...tags[tagKey],\r\n    //         [valor]: { checked: false, ativo: true, quantidade: 1 },\r\n    //       };\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    console.log(produtosAtivos);\r\n    dispatch(setFiltros(tags));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}