{"ast":null,"code":"const reducerDatabank = (state = {\n  userInfo: {},\n  produtos: [],\n  orcamentosPrime: [],\n  orcamentosVnda: []\n}, action) => {\n  let orcamentos = [...state.orcamentosPrime];\n  let {\n    indexOrcamento,\n    newOrcamento\n  } = action;\n\n  switch (action.type) {\n    case \"UPDATEDATABANK\":\n      return { ...state,\n        ...action.input\n      };\n\n    case \"UPDATEORCAMENTOPRIME\":\n      return { ...state,\n        orcamentosPrime: [...orcamentos.slice(0, indexOrcamento), newOrcamento, ...orcamentos.slice(indexOrcamento + 1, orcamentos.length)]\n      };\n\n    case \"ADDORCAMENTO\":\n      state.orcamentosPrime = [...state.orcamentosPrime, action.orcamento];\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducerDatabank;","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Reducers/databank.js"],"names":["reducerDatabank","state","userInfo","produtos","orcamentosPrime","orcamentosVnda","action","orcamentos","indexOrcamento","newOrcamento","type","input","slice","length","orcamento"],"mappings":"AAAA,MAAMA,eAAe,GAAG,CACtBC,KAAK,GAAG;AACNC,EAAAA,QAAQ,EAAE,EADJ;AAENC,EAAAA,QAAQ,EAAE,EAFJ;AAGNC,EAAAA,eAAe,EAAE,EAHX;AAINC,EAAAA,cAAc,EAAE;AAJV,CADc,EAOtBC,MAPsB,KAQnB;AACH,MAAIC,UAAU,GAAG,CAAC,GAAGN,KAAK,CAACG,eAAV,CAAjB;AACA,MAAI;AAAEI,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAmCH,MAAvC;;AAEA,UAAQA,MAAM,CAACI,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EAAE,GAAGT,KAAL;AAAY,WAAGK,MAAM,CAACK;AAAtB,OAAP;;AACF,SAAK,sBAAL;AACE,aAAO,EACL,GAAGV,KADE;AAELG,QAAAA,eAAe,EAAE,CACf,GAAGG,UAAU,CAACK,KAAX,CAAiB,CAAjB,EAAoBJ,cAApB,CADY,EAEfC,YAFe,EAGf,GAAGF,UAAU,CAACK,KAAX,CAAiBJ,cAAc,GAAG,CAAlC,EAAqCD,UAAU,CAACM,MAAhD,CAHY;AAFZ,OAAP;;AAQF,SAAK,cAAL;AACEZ,MAAAA,KAAK,CAACG,eAAN,GAAwB,CAAC,GAAGH,KAAK,CAACG,eAAV,EAA2BE,MAAM,CAACQ,SAAlC,CAAxB;AACA,aAAO,EAAE,GAAGb;AAAL,OAAP;;AACF;AACE,aAAOA,KAAP;AAhBJ;AAkBD,CA9BD;;AA+BA,eAAeD,eAAf","sourcesContent":["const reducerDatabank = (\r\n  state = {\r\n    userInfo: {},\r\n    produtos: [],\r\n    orcamentosPrime: [],\r\n    orcamentosVnda: [],\r\n  },\r\n  action\r\n) => {\r\n  let orcamentos = [...state.orcamentosPrime];\r\n  let { indexOrcamento, newOrcamento } = action;\r\n\r\n  switch (action.type) {\r\n    case \"UPDATEDATABANK\":\r\n      return { ...state, ...action.input };\r\n    case \"UPDATEORCAMENTOPRIME\":\r\n      return {\r\n        ...state,\r\n        orcamentosPrime: [\r\n          ...orcamentos.slice(0, indexOrcamento),\r\n          newOrcamento,\r\n          ...orcamentos.slice(indexOrcamento + 1, orcamentos.length),\r\n        ],\r\n      };\r\n    case \"ADDORCAMENTO\":\r\n      state.orcamentosPrime = [...state.orcamentosPrime, action.orcamento];\r\n      return { ...state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducerDatabank;\r\n"]},"metadata":{},"sourceType":"module"}