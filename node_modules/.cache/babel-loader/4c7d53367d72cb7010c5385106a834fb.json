{"ast":null,"code":"import { addOrcamento, changeOrcamentoAtivo, toggleModal } from \"../Actions\";\nimport { ChangePage } from \"./ChangePage\";\nimport { SaveOrcamento } from \"./SaveOrcamento\";\n\nlet crypto = require(\"crypto\");\n\nexport const CriarOrcamentoBranco = titulo => {\n  return (dispatch, getState) => {\n    try {\n      let orcamentos = getState().databank.orcamentosPrime;\n      let id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\n      let orcamento = {\n        id,\n        titulo,\n        pagamentoAntecipado: false,\n        itens: [],\n        criadoEm: new Date(),\n        ultimaModificacao: new Date()\n      };\n      dispatch(addOrcamento(orcamento));\n      dispatch(changeOrcamentoAtivo(orcamentos.length));\n      dispatch(ChangePage(\"orcamentoAtual\"));\n      dispatch(toggleModal({\n        criarOrcamentoBranco: false\n      }));\n      dispatch(SaveOrcamento());\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n_c = CriarOrcamentoBranco;\n\nvar _c;\n\n$RefreshReg$(_c, \"CriarOrcamentoBranco\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/Orcamentos/CriarOrcamentoBranco.js"],"names":["addOrcamento","changeOrcamentoAtivo","toggleModal","ChangePage","SaveOrcamento","crypto","require","CriarOrcamentoBranco","titulo","dispatch","getState","orcamentos","databank","orcamentosPrime","id","randomBytes","toString","toUpperCase","orcamento","pagamentoAntecipado","itens","criadoEm","Date","ultimaModificacao","length","criarOrcamentoBranco","e","console","log"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,oBAAvB,EAA6CC,WAA7C,QAAgE,YAAhE;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAAY;AAC9C,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,QAAI;AACF,UAAIC,UAAU,GAAGD,QAAQ,GAAGE,QAAX,CAAoBC,eAArC;AACA,UAAIC,EAAE,GAAGT,MAAM,CAACU,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,EAAuCC,WAAvC,EAAT;AAEA,UAAIC,SAAS,GAAG;AACdJ,QAAAA,EADc;AAEdN,QAAAA,MAFc;AAGdW,QAAAA,mBAAmB,EAAE,KAHP;AAIdC,QAAAA,KAAK,EAAE,EAJO;AAKdC,QAAAA,QAAQ,EAAE,IAAIC,IAAJ,EALI;AAMdC,QAAAA,iBAAiB,EAAE,IAAID,IAAJ;AANL,OAAhB;AASAb,MAAAA,QAAQ,CAACT,YAAY,CAACkB,SAAD,CAAb,CAAR;AACAT,MAAAA,QAAQ,CAACR,oBAAoB,CAACU,UAAU,CAACa,MAAZ,CAArB,CAAR;AACAf,MAAAA,QAAQ,CAACN,UAAU,CAAC,gBAAD,CAAX,CAAR;AACAM,MAAAA,QAAQ,CAACP,WAAW,CAAC;AAAEuB,QAAAA,oBAAoB,EAAE;AAAxB,OAAD,CAAZ,CAAR;AACAhB,MAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACD,KAlBD,CAkBE,OAAOsB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAtBD;AAuBD,CAxBM;KAAMnB,oB","sourcesContent":["import { addOrcamento, changeOrcamentoAtivo, toggleModal } from \"../Actions\";\r\nimport { ChangePage } from \"./ChangePage\";\r\nimport { SaveOrcamento } from \"./SaveOrcamento\";\r\nlet crypto = require(\"crypto\");\r\n\r\nexport const CriarOrcamentoBranco = (titulo) => {\r\n  return (dispatch, getState) => {\r\n    try {\r\n      let orcamentos = getState().databank.orcamentosPrime;\r\n      let id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\r\n\r\n      let orcamento = {\r\n        id,\r\n        titulo,\r\n        pagamentoAntecipado: false,\r\n        itens: [],\r\n        criadoEm: new Date(),\r\n        ultimaModificacao: new Date(),\r\n      };\r\n\r\n      dispatch(addOrcamento(orcamento));\r\n      dispatch(changeOrcamentoAtivo(orcamentos.length));\r\n      dispatch(ChangePage(\"orcamentoAtual\"));\r\n      dispatch(toggleModal({ criarOrcamentoBranco: false }));\r\n      dispatch(SaveOrcamento());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}