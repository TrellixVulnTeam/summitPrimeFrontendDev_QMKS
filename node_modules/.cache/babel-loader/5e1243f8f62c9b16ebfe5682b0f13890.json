{"ast":null,"code":"import { changePage, loading, toggleModal, updateOrcamentos } from \"./Actions\";\nimport callBackend from \"./CallBackend\";\n\nvar crypto = require(\"crypto\");\n\nexport const criarOrcamento = titulo => {\n  return async (dispatch, getState) => {\n    // dispatch(loading(true));\n    let {\n      socket\n    } = getState().pages;\n    let token = localStorage.getItem(\"token\");\n    let id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\n    let orcamento = {\n      id,\n      titulo,\n      pagamentoAntecipado: false,\n      itens: [{\n        sku: \"\",\n        nome: \"\",\n        caixaMaster: 0,\n        valor: 0,\n        quantidade: 0,\n        multiplo: 0,\n        estoque: 0\n      }],\n      criadoEm: new Date(),\n      ultimaModificacao: new Date()\n    };\n    await callBackend(socket, \"newOrcamento\", token, {\n      orcamento\n    }); // await dispatch(updateOrcamentos({ atual: id }));\n\n    await dispatch(toggleModal(\"criarOrcamento\", false));\n    await dispatch(loading(false)); // await dispatch(changePage(\"orcamentoAtual\"));\n    // await dispatch(toggleModal(\"informacoes\", true));\n\n    Promise.resolve();\n  };\n};","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/CriarOrcamento.js"],"names":["changePage","loading","toggleModal","updateOrcamentos","callBackend","crypto","require","criarOrcamento","titulo","dispatch","getState","socket","pages","token","localStorage","getItem","id","randomBytes","toString","toUpperCase","orcamento","pagamentoAntecipado","itens","sku","nome","caixaMaster","valor","quantidade","multiplo","estoque","criadoEm","Date","ultimaModificacao","Promise","resolve"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,WAA9B,EAA2CC,gBAA3C,QAAmE,WAAnE;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;AACxC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAaD,QAAQ,GAAGE,KAA5B;AACA,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,QAAIC,EAAE,GAAGX,MAAM,CAACY,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,EAAuCC,WAAvC,EAAT;AACA,QAAIC,SAAS,GAAG;AACdJ,MAAAA,EADc;AAEdR,MAAAA,MAFc;AAGda,MAAAA,mBAAmB,EAAE,KAHP;AAIdC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,GAAG,EAAE,EADP;AAEEC,QAAAA,IAAI,EAAE,EAFR;AAGEC,QAAAA,WAAW,EAAE,CAHf;AAIEC,QAAAA,KAAK,EAAE,CAJT;AAKEC,QAAAA,UAAU,EAAE,CALd;AAMEC,QAAAA,QAAQ,EAAE,CANZ;AAOEC,QAAAA,OAAO,EAAE;AAPX,OADK,CAJO;AAedC,MAAAA,QAAQ,EAAE,IAAIC,IAAJ,EAfI;AAgBdC,MAAAA,iBAAiB,EAAE,IAAID,IAAJ;AAhBL,KAAhB;AAkBA,UAAM3B,WAAW,CAACO,MAAD,EAAS,cAAT,EAAyBE,KAAzB,EAAgC;AAAEO,MAAAA;AAAF,KAAhC,CAAjB,CAvBmC,CAwBnC;;AACA,UAAMX,QAAQ,CAACP,WAAW,CAAC,gBAAD,EAAmB,KAAnB,CAAZ,CAAd;AACA,UAAMO,QAAQ,CAACR,OAAO,CAAC,KAAD,CAAR,CAAd,CA1BmC,CA4BnC;AACA;;AAEAgC,IAAAA,OAAO,CAACC,OAAR;AACD,GAhCD;AAiCD,CAlCM","sourcesContent":["import { changePage, loading, toggleModal, updateOrcamentos } from \"./Actions\";\r\nimport callBackend from \"./CallBackend\";\r\nvar crypto = require(\"crypto\");\r\n\r\nexport const criarOrcamento = (titulo) => {\r\n  return async (dispatch, getState) => {\r\n    // dispatch(loading(true));\r\n    let { socket } = getState().pages;\r\n    let token = localStorage.getItem(\"token\");\r\n    let id = crypto.randomBytes(20).toString(\"hex\").toUpperCase();\r\n    let orcamento = {\r\n      id,\r\n      titulo,\r\n      pagamentoAntecipado: false,\r\n      itens: [\r\n        {\r\n          sku: \"\",\r\n          nome: \"\",\r\n          caixaMaster: 0,\r\n          valor: 0,\r\n          quantidade: 0,\r\n          multiplo: 0,\r\n          estoque: 0,\r\n        },\r\n      ],\r\n      criadoEm: new Date(),\r\n      ultimaModificacao: new Date(),\r\n    };\r\n    await callBackend(socket, \"newOrcamento\", token, { orcamento });\r\n    // await dispatch(updateOrcamentos({ atual: id }));\r\n    await dispatch(toggleModal(\"criarOrcamento\", false));\r\n    await dispatch(loading(false));\r\n\r\n    // await dispatch(changePage(\"orcamentoAtual\"));\r\n    // await dispatch(toggleModal(\"informacoes\", true));\r\n\r\n    Promise.resolve();\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}