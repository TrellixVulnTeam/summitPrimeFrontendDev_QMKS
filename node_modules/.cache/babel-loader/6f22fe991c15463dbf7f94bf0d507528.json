{"ast":null,"code":"import { setFiltros } from \"../Actions\";\nimport { ToggleFiltros } from \"./ToggleFiltros\";\nexport const SetFiltros = bool => {\n  return async (dispatch, getState) => {\n    let produtos = getState().databank.produtos;\n    let tags = {};\n\n    for (let i = 0; i < produtos.length; i++) {\n      const produto = produtos[i];\n      let tagKeys = Object.keys(produto.tags);\n\n      for (let j = 0; j < tagKeys.length; j++) {\n        const tagKey = tagKeys[j];\n        let valor = produto.tags[tagKey];\n        let quantidade = 1;\n\n        if (tags[tagKey] && tags[tagKey][valor]) {\n          quantidade += tags[tagKey][valor].quantidade;\n          tags[tagKey][valor].quantidade = quantidade;\n        } else {\n          tags[tagKey] = { ...tags[tagKey],\n            [valor]: {\n              checked: false,\n              ativo: true,\n              quantidade\n            }\n          };\n        }\n      }\n    }\n\n    dispatch(setFiltros(tags));\n\n    if (bool) {\n      dispatch(ToggleFiltros({}));\n    }\n  };\n};\n_c = SetFiltros;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetFiltros\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/Loja/SetFiltros.js"],"names":["setFiltros","ToggleFiltros","SetFiltros","bool","dispatch","getState","produtos","databank","tags","i","length","produto","tagKeys","Object","keys","j","tagKey","valor","quantidade","checked","ativo"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,QAAQ,GAAGD,QAAQ,GAAGE,QAAX,CAAoBD,QAAnC;AACA,QAAIE,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAME,OAAO,GAAGL,QAAQ,CAACG,CAAD,CAAxB;AACA,UAAIG,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,OAAO,CAACH,IAApB,CAAd;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACF,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACvC,cAAMC,MAAM,GAAGJ,OAAO,CAACG,CAAD,CAAtB;AACA,YAAIE,KAAK,GAAGN,OAAO,CAACH,IAAR,CAAaQ,MAAb,CAAZ;AACA,YAAIE,UAAU,GAAG,CAAjB;;AAEA,YAAIV,IAAI,CAACQ,MAAD,CAAJ,IAAgBR,IAAI,CAACQ,MAAD,CAAJ,CAAaC,KAAb,CAApB,EAAyC;AACvCC,UAAAA,UAAU,IAAIV,IAAI,CAACQ,MAAD,CAAJ,CAAaC,KAAb,EAAoBC,UAAlC;AACAV,UAAAA,IAAI,CAACQ,MAAD,CAAJ,CAAaC,KAAb,EAAoBC,UAApB,GAAiCA,UAAjC;AACD,SAHD,MAGO;AACLV,UAAAA,IAAI,CAACQ,MAAD,CAAJ,GAAe,EACb,GAAGR,IAAI,CAACQ,MAAD,CADM;AAEb,aAACC,KAAD,GAAS;AAAEE,cAAAA,OAAO,EAAE,KAAX;AAAkBC,cAAAA,KAAK,EAAE,IAAzB;AAA+BF,cAAAA;AAA/B;AAFI,WAAf;AAID;AACF;AACF;;AACDd,IAAAA,QAAQ,CAACJ,UAAU,CAACQ,IAAD,CAAX,CAAR;;AACA,QAAIL,IAAJ,EAAU;AACRC,MAAAA,QAAQ,CAACH,aAAa,CAAC,EAAD,CAAd,CAAR;AACD;AACF,GA3BD;AA4BD,CA7BM;KAAMC,U","sourcesContent":["import { setFiltros } from \"../Actions\";\r\nimport { ToggleFiltros } from \"./ToggleFiltros\";\r\n\r\nexport const SetFiltros = (bool) => {\r\n  return async (dispatch, getState) => {\r\n    let produtos = getState().databank.produtos;\r\n    let tags = {};\r\n\r\n    for (let i = 0; i < produtos.length; i++) {\r\n      const produto = produtos[i];\r\n      let tagKeys = Object.keys(produto.tags);\r\n      for (let j = 0; j < tagKeys.length; j++) {\r\n        const tagKey = tagKeys[j];\r\n        let valor = produto.tags[tagKey];\r\n        let quantidade = 1;\r\n\r\n        if (tags[tagKey] && tags[tagKey][valor]) {\r\n          quantidade += tags[tagKey][valor].quantidade;\r\n          tags[tagKey][valor].quantidade = quantidade;\r\n        } else {\r\n          tags[tagKey] = {\r\n            ...tags[tagKey],\r\n            [valor]: { checked: false, ativo: true, quantidade },\r\n          };\r\n        }\r\n      }\r\n    }\r\n    dispatch(setFiltros(tags));\r\n    if (bool) {\r\n      dispatch(ToggleFiltros({}));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}