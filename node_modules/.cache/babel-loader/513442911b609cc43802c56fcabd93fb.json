{"ast":null,"code":"import { loading } from \"../Actions\";\nimport callBackend from \"../Utils/CallBackend\";\nexport const SendOrcamento = () => {\n  return async (dispatch, getState) => {\n    dispatch(loading(true));\n    let token = localStorage.getItem(\"token\");\n    let {\n      socket\n    } = getState().config;\n    let index = getState().config.orcamentoAtivo;\n    let {\n      userInfo: {\n        consultor: {\n          email: vendedor\n        }\n      },\n      orcamentosPrime\n    } = getState().databank;\n    let orcamentoAtual = orcamentosPrime[index];\n    let data = {\n      orcamentoAtual,\n      vendedor\n    };\n    await callBackend(socket, \"sendOrcamento\", token, data).then(dispatch(loading(false)));\n  };\n};\n_c = SendOrcamento;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendOrcamento\");","map":{"version":3,"sources":["C:/Users/rocan/OneDrive/Documents/SummitPrime/frontendDev/src/Redux/Actions/Orcamentos/SendOrcamento.js"],"names":["loading","callBackend","SendOrcamento","dispatch","getState","token","localStorage","getItem","socket","config","index","orcamentoAtivo","userInfo","consultor","email","vendedor","orcamentosPrime","databank","orcamentoAtual","data","then"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAACH,OAAO,CAAC,IAAD,CAAR,CAAR;AACA,QAAIK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,QAAI;AAAEC,MAAAA;AAAF,QAAaJ,QAAQ,GAAGK,MAA5B;AACA,QAAIC,KAAK,GAAGN,QAAQ,GAAGK,MAAX,CAAkBE,cAA9B;AACA,QAAI;AACFC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAEC;AAAT;AADH,OADR;AAIFC,MAAAA;AAJE,QAKAZ,QAAQ,GAAGa,QALf;AAOA,QAAIC,cAAc,GAAGF,eAAe,CAACN,KAAD,CAApC;AACA,QAAIS,IAAI,GAAG;AAAED,MAAAA,cAAF;AAAkBH,MAAAA;AAAlB,KAAX;AACA,UAAMd,WAAW,CAACO,MAAD,EAAS,eAAT,EAA0BH,KAA1B,EAAiCc,IAAjC,CAAX,CAAkDC,IAAlD,CACJjB,QAAQ,CAACH,OAAO,CAAC,KAAD,CAAR,CADJ,CAAN;AAGD,GAjBD;AAkBD,CAnBM;KAAME,a","sourcesContent":["import { loading } from \"../Actions\";\r\nimport callBackend from \"../Utils/CallBackend\";\r\n\r\nexport const SendOrcamento = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(loading(true));\r\n    let token = localStorage.getItem(\"token\");\r\n    let { socket } = getState().config;\r\n    let index = getState().config.orcamentoAtivo;\r\n    let {\r\n      userInfo: {\r\n        consultor: { email: vendedor },\r\n      },\r\n      orcamentosPrime,\r\n    } = getState().databank;\r\n\r\n    let orcamentoAtual = orcamentosPrime[index];\r\n    let data = { orcamentoAtual, vendedor };\r\n    await callBackend(socket, \"sendOrcamento\", token, data).then(\r\n      dispatch(loading(false))\r\n    );\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}